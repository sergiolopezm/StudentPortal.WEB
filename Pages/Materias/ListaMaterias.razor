@page "/materias"
@attribute [Authorize]
@inject IMateriaService MateriaService
@inject NavigationManager NavigationManager

<PageTitle>Materias - Student Portal</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Materias</h1>
    </div>

    <NavigationButtons />
    
    <div class="card">
        <div class="card-header bg-light">
            <div class="row">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Buscar materias..." 
                               @bind-value="_searchTerm" @bind-value:event="oninput" @onkeyup="HandleSearch" />
                        <button class="btn btn-outline-secondary" type="button" @onclick="SearchMaterias">
                            <span class="oi oi-magnifying-glass"></span> Buscar
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (_loading)
            {
                <Loading IsLoading="true" Message="Cargando materias..." />
            }
            else if (_errorMessage != null)
            {
                <Alert AlertType="danger" Title="Error" Message="@_errorMessage" OnClose="ClearError" />
            }
            else if (_materias == null || !_materias.Any())
            {
                <div class="alert alert-info">
                    No se encontraron materias disponibles.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Código</th>
                                <th>Nombre</th>
                                <th>Créditos</th>
                                <th>Descripción</th>
                                <th>Profesores</th>
                                <th>Inscritos</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var materia in _materias)
                            {
                                <tr>
                                    <td>@materia.Codigo</td>
                                    <td>@materia.Nombre</td>
                                    <td>@materia.Creditos</td>
                                    <td>@(materia.Descripcion?.Length > 50 ? materia.Descripcion.Substring(0, 47) + "..." : materia.Descripcion)</td>
                                    <td>
                                        @if (materia.Profesores != null && materia.Profesores.Any())
                                        {
                                            <ul class="list-unstyled mb-0">
                                                @foreach (var profesor in materia.Profesores)
                                                {
                                                    <li>@profesor</li>
                                                }
                                            </ul>
                                        }
                                        else
                                        {
                                            <span>Sin profesores asignados</span>
                                        }
                                    </td>
                                    <td>@materia.InscripcionesCount</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                @if (_paginationInfo != null)
                {
                    <div class="mt-3 d-flex justify-content-between align-items-center">
                        <div>
                            Mostrando <strong>@(_paginationInfo.Lista?.Count ?? 0)</strong> de <strong>@_paginationInfo.TotalRegistros</strong> materias
                        </div>
                        <Pagination 
                            CurrentPage="@_paginationInfo.Pagina" 
                            TotalPages="@_paginationInfo.TotalPaginas" 
                            OnPageChanged="HandlePageChange" />
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<MateriaDto>? _materias;
    private PaginacionDto<MateriaDto>? _paginationInfo;
    private bool _loading = true;
    private string? _errorMessage;
    private string _searchTerm = string.Empty;
    private int _currentPage = 1;
    private int _itemsPerPage = 10;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadMaterias();
    }
    
    private async Task LoadMaterias()
    {
        _loading = true;
        _errorMessage = null;
        
        var result = await MateriaService.GetPaginated(_currentPage, _itemsPerPage, _searchTerm);
        
        if (result.Success)
        {
            _paginationInfo = result.Data;
            _materias = _paginationInfo?.Lista;
        }
        else
        {
            _errorMessage = result.Message;
        }
        
        _loading = false;
    }
    
    private async Task HandlePageChange(int page)
    {
        _currentPage = page;
        await LoadMaterias();
    }
    
    private async Task SearchMaterias()
    {
        _currentPage = 1;
        await LoadMaterias();
    }
    
    private async Task HandleSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchMaterias();
        }
    }
    
    private void ClearError()
    {
        _errorMessage = null;
    }
}