@page "/estudiantes"
@attribute [Authorize(Roles = "Admin")]
@inject IEstudianteService EstudianteService
@inject NavigationManager NavigationManager

<PageTitle>Estudiantes - Student Portal</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Estudiantes</h1>
        <a href="/auth/register" class="btn btn-primary">Registrar Nuevo Usuario</a>
    </div>

    <NavigationButtons />
    
    <div class="card">
        <div class="card-header bg-light">
            <div class="row">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Buscar estudiantes..." 
                               @bind-value="_searchTerm" @bind-value:event="oninput" @onkeyup="HandleSearch" />
                        <button class="btn btn-outline-secondary" type="button" @onclick="SearchEstudiantes">
                            <span class="oi oi-magnifying-glass"></span> Buscar
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (_loading)
            {
                <Loading IsLoading="true" Message="Cargando estudiantes..." />
            }
            else if (_errorMessage != null)
            {
                <Alert AlertType="danger" Title="Error" Message="@_errorMessage" OnClose="ClearError" />
            }
            else if (_estudiantes == null || !_estudiantes.Any())
            {
                <div class="alert alert-info">
                    No se encontraron estudiantes. 
                    <a href="/auth/register" class="alert-link">Registrar un nuevo estudiante</a>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Nombre</th>
                                <th>Identificación</th>
                                <th>Email</th>
                                <th>Programa</th>
                                <th>Materias</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var estudiante in _estudiantes)
                            {
                                <tr>
                                    <td>@estudiante.Id</td>
                                    <td>@estudiante.NombreCompleto</td>
                                    <td>@estudiante.Identificacion</td>
                                    <td>@estudiante.Email</td>
                                    <td>@estudiante.Programa</td>
                                    <td>@estudiante.MateriasInscritasCount / 3</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a href="/estudiantes/@estudiante.Id" class="btn btn-sm btn-info">
                                                <span class="oi oi-eye"></span>
                                            </a>
                                            <a href="/estudiantes/editar/@estudiante.Id" class="btn btn-sm btn-warning">
                                                <span class="oi oi-pencil"></span>
                                            </a>
                                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(estudiante)">
                                                <span class="oi oi-trash"></span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                @if (_paginationInfo != null)
                {
                    <div class="mt-3 d-flex justify-content-between align-items-center">
                        <div>
                            Mostrando <strong>@(_paginationInfo.Lista?.Count ?? 0)</strong> de <strong>@_paginationInfo.TotalRegistros</strong> estudiantes
                        </div>
                        <Pagination 
                            CurrentPage="@_paginationInfo.Pagina" 
                            TotalPages="@_paginationInfo.TotalPaginas" 
                            OnPageChanged="HandlePageChange" />
                    </div>
                }
            }
        </div>
    </div>
    
    <Confirm 
        IsVisible="_showDeleteConfirm" 
        Title="Confirmar Eliminación" 
        Message="@($"¿Está seguro que desea eliminar al estudiante '{_estudianteToDelete?.NombreCompleto}'?")" 
        OnConfirm="DeleteEstudiante" 
        OnCancel="CancelDelete" />
</div>

@code {
    private List<EstudianteDto>? _estudiantes;
    private PaginacionDto<EstudianteDto>? _paginationInfo;
    private bool _loading = true;
    private string? _errorMessage;
    private string _searchTerm = string.Empty;
    private bool _showDeleteConfirm = false;
    private EstudianteDto? _estudianteToDelete;
    private int _currentPage = 1;
    private int _itemsPerPage = 10;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadEstudiantes();
    }
    
    private async Task LoadEstudiantes()
    {
        _loading = true;
        _errorMessage = null;
        
        var result = await EstudianteService.GetPaginated(_currentPage, _itemsPerPage, _searchTerm);
        
        if (result.Success)
        {
            _paginationInfo = result.Data;
            _estudiantes = _paginationInfo?.Lista;
        }
        else
        {
            _errorMessage = result.Message;
        }
        
        _loading = false;
    }
    
    private async Task HandlePageChange(int page)
    {
        _currentPage = page;
        await LoadEstudiantes();
    }
    
    private async Task SearchEstudiantes()
    {
        _currentPage = 1;
        await LoadEstudiantes();
    }
    
    private async Task HandleSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchEstudiantes();
        }
    }
    
    private void ConfirmDelete(EstudianteDto estudiante)
    {
        _estudianteToDelete = estudiante;
        _showDeleteConfirm = true;
    }
    
    private void CancelDelete()
    {
        _showDeleteConfirm = false;
        _estudianteToDelete = null;
    }
    
    private async Task DeleteEstudiante()
    {
        if (_estudianteToDelete == null) return;
        
        _loading = true;
        
        var result = await EstudianteService.Delete(_estudianteToDelete.Id);
        
        if (result.Success)
        {
            await LoadEstudiantes();
        }
        else
        {
            _errorMessage = result.Message;
        }
        
        _showDeleteConfirm = false;
        _estudianteToDelete = null;
        _loading = false;
    }
    
    private void ClearError()
    {
        _errorMessage = null;
    }
}