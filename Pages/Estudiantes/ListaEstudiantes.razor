@page "/estudiantes"
@attribute [Authorize(Roles = "Admin")]
@inject IEstudianteService EstudianteService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Estudiantes - Student Portal</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Estudiantes</h1>
        <a href="/auth/register" class="btn btn-primary">Registrar Nuevo Usuario</a>
    </div>

    <NavigationButtons />
    
    @if (_loading)
    {
        <Loading IsLoading="true" Message="Cargando lista de estudiantes..." />
    }
    else if (_errorMessage != null)
    {
        <Alert AlertType="danger" Title="Error" Message="@_errorMessage" OnClose="ClearError" />
    }
    else if (_successMessage != null)
    {
        <Alert AlertType="success" Message="@_successMessage" OnClose="ClearSuccess" />
    }
    
    <div class="card">
        <div class="card-body">
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Buscar estudiantes..." 
                       @bind="_searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
                <button class="btn btn-outline-primary" type="button">
                    <i class="bi bi-search"></i> Buscar
                </button>
            </div>

            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Identificación</th>
                            <th>Email</th>
                            <th>Programa</th>
                            <th>Materias</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_estudiantes != null && _estudiantes.Any())
                        {
                            @foreach (var estudiante in _estudiantes)
                            {
                                <tr class="@(estudiante.Activo ? "" : "table-danger")">
                                    <td>@estudiante.Id</td>
                                    <td>@estudiante.NombreCompleto</td>
                                    <td>@estudiante.Identificacion</td>
                                    <td>@estudiante.Email</td>
                                    <td>@estudiante.Programa</td>
                                    <td>@estudiante.MateriasInscritasCount / 3</td>
                                    <td>
                                        @if (estudiante.Activo)
                                        {
                                            <span class="badge bg-success">Activo</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Inactivo</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a href="/estudiantes/@estudiante.Id" class="btn btn-sm btn-info" title="Ver detalles">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a href="/estudiantes/editar/@estudiante.Id" class="btn btn-sm btn-warning" title="Editar estudiante">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                            <button class="btn btn-sm @(estudiante.Activo ? "btn-danger" : "btn-success")" 
                                                    @onclick="() => ToggleEstudianteActivo(estudiante)" 
                                                    title="@(estudiante.Activo ? "Desactivar" : "Activar")">
                                                <i class="bi @(estudiante.Activo ? "bi-toggle-on" : "bi-toggle-off")"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center">No hay estudiantes para mostrar</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            @if (_paginationInfo != null)
            {
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        Mostrando <strong>@(_paginationInfo.Lista?.Count ?? 0)</strong> de <strong>@_paginationInfo.TotalRegistros</strong> estudiantes
                    </div>
                    <Pagination 
                        CurrentPage="@_paginationInfo.Pagina" 
                        TotalPages="@_paginationInfo.TotalPaginas" 
                        OnPageChanged="HandlePageChange" />
                </div>
            }
        </div>
    </div>
</div>

<Confirm 
    IsVisible="_showToggleConfirm" 
    Title="@(_estudianteToToggle?.Activo == true ? "Desactivar Estudiante" : "Activar Estudiante")" 
    Message="@(_estudianteToToggle?.Activo == true 
        ? $"¿Está seguro que desea desactivar al estudiante {_estudianteToToggle.NombreCompleto}?" 
        : $"¿Está seguro que desea activar al estudiante {_estudianteToToggle?.NombreCompleto}?")" 
    OnConfirm="ConfirmToggleEstudiante" 
    OnCancel="CancelToggle" />

@code {
    private List<EstudianteDto>? _estudiantes;
    private PaginacionDto<EstudianteDto>? _paginationInfo;
    private bool _loading = true;
    private string? _errorMessage;
    private string? _successMessage;
    private string _searchTerm = "";
    private int _currentPage = 1;
    private int _itemsPerPage = 10;
    
    // Variables para activar/desactivar estudiante
    private bool _showToggleConfirm = false;
    private EstudianteDto? _estudianteToToggle;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadEstudiantes();
    }
    
    private async Task LoadEstudiantes()
    {
        _loading = true;
        _errorMessage = null;
        
        try
        {
            var result = await EstudianteService.GetPaginated(_currentPage, _itemsPerPage, _searchTerm);
            
            if (result.Success)
            {
                _paginationInfo = result.Data;
                _estudiantes = _paginationInfo?.Lista;
            }
            else
            {
                _errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error al cargar estudiantes: {ex.Message}";
        }
        
        _loading = false;
    }
    
    private async Task HandlePageChange(int page)
    {
        _currentPage = page;
        await LoadEstudiantes();
    }
    
    private async Task HandleSearch()
    {
        _currentPage = 1; // Volver a la primera página al buscar
        await LoadEstudiantes();
    }
    
    private void ToggleEstudianteActivo(EstudianteDto estudiante)
    {
        _estudianteToToggle = estudiante;
        _showToggleConfirm = true;
    }
    
    private void CancelToggle()
    {
        _showToggleConfirm = false;
        _estudianteToToggle = null;
    }
    
    private async Task ConfirmToggleEstudiante()
    {
        if (_estudianteToToggle == null) return;
        
        try
        {
            // Invertir estado actual
            _estudianteToToggle.Activo = !_estudianteToToggle.Activo;
            
            var result = await EstudianteService.Update(_estudianteToToggle.Id, _estudianteToToggle);
            
            if (result.Success)
            {
                _successMessage = _estudianteToToggle.Activo 
                    ? $"Estudiante {_estudianteToToggle.NombreCompleto} activado correctamente" 
                    : $"Estudiante {_estudianteToToggle.NombreCompleto} desactivado correctamente";
                    
                await LoadEstudiantes(); // Recargar la lista
            }
            else
            {
                _errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error al cambiar estado: {ex.Message}";
        }
        
        _showToggleConfirm = false;
        _estudianteToToggle = null;
    }
    
    private void ClearError()
    {
        _errorMessage = null;
    }
    
    private void ClearSuccess()
    {
        _successMessage = null;
    }
}