<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="javascript:void(0)" @onclick="() => OnPageChanged.InvokeAsync(1)" aria-label="First">
                <span aria-hidden="true">&laquo;&laquo;</span>
            </a>
        </li>
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="javascript:void(0)" @onclick="() => OnPageChanged.InvokeAsync(CurrentPage - 1)" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        
        @foreach (var pageNum in GetPageNumbers())
        {
            <li class="page-item @(pageNum == CurrentPage ? "active" : "")">
                <a class="page-link" href="javascript:void(0)" @onclick="() => OnPageChanged.InvokeAsync(pageNum)">@pageNum</a>
            </li>
        }
        
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <a class="page-link" href="javascript:void(0)" @onclick="() => OnPageChanged.InvokeAsync(CurrentPage + 1)" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <a class="page-link" href="javascript:void(0)" @onclick="() => OnPageChanged.InvokeAsync(TotalPages)" aria-label="Last">
                <span aria-hidden="true">&raquo;&raquo;</span>
            </a>
        </li>
    </ul>
</nav>

@code {
    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public int TotalPages { get; set; } = 1;

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    private List<int> GetPageNumbers()
    {
        var pages = new List<int>();
        
        int startPage = Math.Max(1, CurrentPage - 2);
        int endPage = Math.Min(TotalPages, CurrentPage + 2);
        
        for (int i = startPage; i <= endPage; i++)
        {
            pages.Add(i);
        }
        
        return pages;
    }
}